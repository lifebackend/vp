// Code generated by go-swagger; DO NOT EDIT.

package general

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"runtime/debug"
	"time"

	"github.com/go-openapi/runtime/middleware"
	"github.com/lifebackend/vp/pkg/scope"
	prometheusmetrics "github.com/lifebackend/vp/tools/prometheus-metrics"
	"github.com/sirupsen/logrus"
)

func NewPostSmsResponses() *PostSmsResponses {
	return &PostSmsResponses{
		PostSmsOK:                  NewPostSmsOK,
		PostSmsInternalServerError: NewPostSmsInternalServerError,
	}
}

type PostSmsResponses struct {
	PostSmsOK                  NewPostSmsOKFunc
	PostSmsInternalServerError NewPostSmsInternalServerErrorFunc
}

// PostSmsHandlerFunc turns a function with the right signature into a post sms handler
type PostSmsHandlerFunc func(*PostSmsParams, *PostSmsResponses) middleware.Responder

// Handle executing the request and returning a response
func (fn PostSmsHandlerFunc) Handle(params *PostSmsParams, respond *PostSmsResponses) middleware.Responder {
	return fn(params, respond)
}

// PostSmsHandler interface for that can handle valid post sms params
type PostSmsHandler interface {
	Handle(*PostSmsParams, *PostSmsResponses) middleware.Responder
}

// NewPostSms creates a new http.Handler for the post sms operation
func NewPostSms(ctx *middleware.Context, handler PostSmsHandler) *PostSms {
	return &PostSms{Context: ctx, Handler: handler}
}

/*
PostSms swagger:route POST /sms general postSms

PostSms post sms API
*/
type PostSms struct {
	Context *middleware.Context
	Handler PostSmsHandler
}

func (o *PostSms) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostSmsParams()

	if err := o.Context.BindValidRequest(r, route, Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	// pass predefined values from middleware
	requestCtx := r.Context()
	logger := requestCtx.Value("logger").(*logrus.Entry)
	xCorrelationID := requestCtx.Value("xCorrelationID").(string)

	// pass body
	Params.RequestBody = requestCtx.Value("body").([]byte)

	metrics := requestCtx.Value("metrics").(*prometheusmetrics.Metrics)

	// prepare scope
	Params.Scope = scope.NewScope(requestCtx, logger, xCorrelationID, metrics)
	Params.Scope.SetResource("POST /sms")

	defer func() {
		if rec := recover(); rec != nil {
			Params.Scope.Logger().Errorf("%s: %s", rec, debug.Stack())

			xCorrelationID, ok := requestCtx.Value("xCorrelationID").(string)
			if ok {
				rw.Header().Add("X-Correlation-Id", xCorrelationID)
			}

			rw.WriteHeader(http.StatusInternalServerError)

			o.Context.Respond(rw, r, route.Produces, route, json.RawMessage([]byte(`{"code":"panic","message":""}`)))
		}
	}()

	responses := NewPostSmsResponses()

	started := time.Now()

	res := o.Handler.Handle(Params, responses) // actually handle the request

	if metrics != nil {
		metrics.AddAPIResponseDuration("POST /sms", time.Now().Sub(started))
	}

	o.Context.Respond(rw, r, route.Produces, route, res)

}
