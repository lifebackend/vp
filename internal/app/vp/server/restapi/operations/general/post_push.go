// Code generated by go-swagger; DO NOT EDIT.

package general

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"runtime/debug"
	"time"

	"github.com/go-openapi/runtime/middleware"
	"github.com/lifebackend/vp/pkg/scope"
	prometheusmetrics "github.com/lifebackend/vp/tools/prometheus-metrics"
	"github.com/sirupsen/logrus"
)

func NewPostPushResponses() *PostPushResponses {
	return &PostPushResponses{
		PostPushOK:                  NewPostPushOK,
		PostPushInternalServerError: NewPostPushInternalServerError,
	}
}

type PostPushResponses struct {
	PostPushOK                  NewPostPushOKFunc
	PostPushInternalServerError NewPostPushInternalServerErrorFunc
}

// PostPushHandlerFunc turns a function with the right signature into a post push handler
type PostPushHandlerFunc func(*PostPushParams, *PostPushResponses) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPushHandlerFunc) Handle(params *PostPushParams, respond *PostPushResponses) middleware.Responder {
	return fn(params, respond)
}

// PostPushHandler interface for that can handle valid post push params
type PostPushHandler interface {
	Handle(*PostPushParams, *PostPushResponses) middleware.Responder
}

// NewPostPush creates a new http.Handler for the post push operation
func NewPostPush(ctx *middleware.Context, handler PostPushHandler) *PostPush {
	return &PostPush{Context: ctx, Handler: handler}
}

/*PostPush swagger:route POST /push general postPush

PostPush post push API

*/
type PostPush struct {
	Context *middleware.Context
	Handler PostPushHandler
}

func (o *PostPush) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostPushParams()

	if err := o.Context.BindValidRequest(r, route, Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	// pass predefined values from middleware
	requestCtx := r.Context()
	logger := requestCtx.Value("logger").(*logrus.Entry)
	xCorrelationID := requestCtx.Value("xCorrelationID").(string)

	// pass body
	Params.RequestBody = requestCtx.Value("body").([]byte)

	metrics := requestCtx.Value("metrics").(*prometheusmetrics.Metrics)

	// prepare scope
	Params.Scope = scope.NewScope(requestCtx, logger, xCorrelationID, metrics)
	Params.Scope.SetResource("POST /push")

	defer func() {
		if rec := recover(); rec != nil {
			Params.Scope.Logger().Errorf("%s: %s", rec, debug.Stack())

			xCorrelationID, ok := requestCtx.Value("xCorrelationID").(string)
			if ok {
				rw.Header().Add("X-Correlation-Id", xCorrelationID)
			}

			rw.WriteHeader(http.StatusInternalServerError)

			o.Context.Respond(rw, r, route.Produces, route, json.RawMessage([]byte(`{"code":"panic","message":""}`)))
		}
	}()

	responses := NewPostPushResponses()

	started := time.Now()

	res := o.Handler.Handle(Params, responses) // actually handle the request

	if metrics != nil {
		metrics.AddAPIResponseDuration("POST /push", time.Now().Sub(started))
	}

	o.Context.Respond(rw, r, route.Produces, route, res)

}
