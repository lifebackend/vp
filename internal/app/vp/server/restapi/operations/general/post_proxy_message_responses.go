// Code generated by go-swagger; DO NOT EDIT.

package general

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/lifebackend/vp/internal/vperror"
	"github.com/sirupsen/logrus"

	"github.com/lifebackend/vp/internal/app/vp/server/models"
)

// PostProxyMessageOKCode is the HTTP code returned for type PostProxyMessageOK
const PostProxyMessageOKCode int = 200

/*PostProxyMessageOK Successful Response

swagger:response postProxyMessageOK
*/
type PostProxyMessageOK struct {

	/*
	  In: Body
	*/
	Payload *models.PostProxyMessagesResponse `json:"body,omitempty"`
}

// NewPostProxyMessageOKFunc is a type the create the response func
type NewPostProxyMessageOKFunc func() *PostProxyMessageOK

// NewPostProxyMessageOK creates PostProxyMessageOK with default headers values
func NewPostProxyMessageOK() *PostProxyMessageOK {

	return &PostProxyMessageOK{}
}

// WithPayload adds the payload to the post proxy message o k response
func (o *PostProxyMessageOK) WithPayload(payload *models.PostProxyMessagesResponse) *PostProxyMessageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post proxy message o k response
func (o *PostProxyMessageOK) SetPayload(payload *models.PostProxyMessagesResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProxyMessageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostProxyMessageBadRequestCode is the HTTP code returned for type PostProxyMessageBadRequest
const PostProxyMessageBadRequestCode int = 400

/*PostProxyMessageBadRequest Successful Response

swagger:response postProxyMessageBadRequest
*/
type PostProxyMessageBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewPostProxyMessageBadRequestFunc is a type the create the response func
type NewPostProxyMessageBadRequestFunc func() *PostProxyMessageBadRequest

// NewPostProxyMessageBadRequest creates PostProxyMessageBadRequest with default headers values
func NewPostProxyMessageBadRequest() *PostProxyMessageBadRequest {

	return &PostProxyMessageBadRequest{}
}

// WithPayload adds the payload to the post proxy message bad request response
func (o *PostProxyMessageBadRequest) WithPayload(payload *models.ErrorMessage) *PostProxyMessageBadRequest {
	o.Payload = payload
	return o
}

// WithErr adds the Error payload with a default code to the post proxy message bad request response
func (o *PostProxyMessageBadRequest) FromErr(err error) *PostProxyMessageBadRequest {
	type swaggerErr interface {
		Plain() (code string, message string, attributes map[string]string)
	}

	if swaggerErr, ok := err.(swaggerErr); ok {
		code, message, attributes := swaggerErr.Plain()

		o.Payload = &models.ErrorMessage{
			Code:       code,
			Message:    message,
			Attributes: attributes,
		}
		return o
	}

	o.Payload = &models.ErrorMessage{
		Code:       "InternalServiceError",
		Message:    err.Error(),
		Attributes: nil,
	}

	return o
}

// WithError adds the Error payload to the post proxy message bad request response
func (o *PostProxyMessageBadRequest) FromMessage(gaemblaErr *vperror.AppMessage) *PostProxyMessageBadRequest {
	o.Payload = &models.ErrorMessage{
		Attributes: gaemblaErr.Attributes,
		Code:       gaemblaErr.Code,
		Message:    gaemblaErr.Message,
	}
	return o
}

// SetPayload sets the payload to the post proxy message bad request response
func (o *PostProxyMessageBadRequest) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProxyMessageBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostProxyMessageInternalServerErrorCode is the HTTP code returned for type PostProxyMessageInternalServerError
const PostProxyMessageInternalServerErrorCode int = 500

/*PostProxyMessageInternalServerError Internal Server Error

swagger:response postProxyMessageInternalServerError
*/
type PostProxyMessageInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewPostProxyMessageInternalServerErrorFunc is a type the create the response func
type NewPostProxyMessageInternalServerErrorFunc func() *PostProxyMessageInternalServerError

// NewPostProxyMessageInternalServerError creates PostProxyMessageInternalServerError with default headers values
func NewPostProxyMessageInternalServerError() *PostProxyMessageInternalServerError {

	return &PostProxyMessageInternalServerError{}
}

// WithPayload adds the payload to the post proxy message internal server error response
func (o *PostProxyMessageInternalServerError) WithPayload(payload *models.ErrorMessage) *PostProxyMessageInternalServerError {
	o.Payload = payload
	return o
}

// WithErr adds the Error payload with a default code to the post proxy message internal server error response
func (o *PostProxyMessageInternalServerError) FromErr(err error) *PostProxyMessageInternalServerError {
	type swaggerErr interface {
		Plain() (code string, message string, attributes map[string]string)
	}

	if swaggerErr, ok := err.(swaggerErr); ok {
		code, message, attributes := swaggerErr.Plain()

		o.Payload = &models.ErrorMessage{
			Code:       code,
			Message:    message,
			Attributes: attributes,
		}
		return o
	}

	o.Payload = &models.ErrorMessage{
		Code:       "InternalServiceError",
		Message:    err.Error(),
		Attributes: nil,
	}

	return o
}

// WithError adds the Error payload to the post proxy message internal server error response
func (o *PostProxyMessageInternalServerError) FromMessage(gaemblaErr *vperror.AppMessage) *PostProxyMessageInternalServerError {
	o.Payload = &models.ErrorMessage{
		Attributes: gaemblaErr.Attributes,
		Code:       gaemblaErr.Code,
		Message:    gaemblaErr.Message,
	}
	return o
}

// SetPayload sets the payload to the post proxy message internal server error response
func (o *PostProxyMessageInternalServerError) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProxyMessageInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}
