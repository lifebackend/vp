// Code generated by go-swagger; DO NOT EDIT.

package general

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/lifebackend/vp/internal/vperror"
	"github.com/sirupsen/logrus"

	"github.com/lifebackend/vp/internal/app/vp/server/models"
)

// GetAppUpdateOKCode is the HTTP code returned for type GetAppUpdateOK
const GetAppUpdateOKCode int = 200

/*GetAppUpdateOK Successful Response

swagger:response getAppUpdateOK
*/
type GetAppUpdateOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewGetAppUpdateOKFunc is a type the create the response func
type NewGetAppUpdateOKFunc func() *GetAppUpdateOK

// NewGetAppUpdateOK creates GetAppUpdateOK with default headers values
func NewGetAppUpdateOK() *GetAppUpdateOK {

	return &GetAppUpdateOK{}
}

// WithPayload adds the payload to the get app update o k response
func (o *GetAppUpdateOK) WithPayload(payload io.ReadCloser) *GetAppUpdateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get app update o k response
func (o *GetAppUpdateOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAppUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		logrus.Panic(err) // let the recovery middleware deal with this
	}
}

// GetAppUpdateInternalServerErrorCode is the HTTP code returned for type GetAppUpdateInternalServerError
const GetAppUpdateInternalServerErrorCode int = 500

/*GetAppUpdateInternalServerError Internal Server Error

swagger:response getAppUpdateInternalServerError
*/
type GetAppUpdateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetAppUpdateInternalServerErrorFunc is a type the create the response func
type NewGetAppUpdateInternalServerErrorFunc func() *GetAppUpdateInternalServerError

// NewGetAppUpdateInternalServerError creates GetAppUpdateInternalServerError with default headers values
func NewGetAppUpdateInternalServerError() *GetAppUpdateInternalServerError {

	return &GetAppUpdateInternalServerError{}
}

// WithPayload adds the payload to the get app update internal server error response
func (o *GetAppUpdateInternalServerError) WithPayload(payload *models.ErrorMessage) *GetAppUpdateInternalServerError {
	o.Payload = payload
	return o
}

// WithErr adds the Error payload with a default code to the get app update internal server error response
func (o *GetAppUpdateInternalServerError) FromErr(err error) *GetAppUpdateInternalServerError {
	type swaggerErr interface {
		Plain() (code string, message string, attributes map[string]string)
	}

	if swaggerErr, ok := err.(swaggerErr); ok {
		code, message, attributes := swaggerErr.Plain()

		o.Payload = &models.ErrorMessage{
			Code:       code,
			Message:    message,
			Attributes: attributes,
		}
		return o
	}

	o.Payload = &models.ErrorMessage{
		Code:       "InternalServiceError",
		Message:    err.Error(),
		Attributes: nil,
	}

	return o
}

// WithError adds the Error payload to the get app update internal server error response
func (o *GetAppUpdateInternalServerError) FromMessage(gaemblaErr *vperror.AppMessage) *GetAppUpdateInternalServerError {
	o.Payload = &models.ErrorMessage{
		Attributes: gaemblaErr.Attributes,
		Code:       gaemblaErr.Code,
		Message:    gaemblaErr.Message,
	}
	return o
}

// SetPayload sets the payload to the get app update internal server error response
func (o *GetAppUpdateInternalServerError) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAppUpdateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			logrus.Panic(err) // let the recovery middleware deal with this
		}
	}
}
