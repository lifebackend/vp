// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProxyMessageRequest ProxyMessageRequest
//
// swagger:model ProxyMessageRequest
type ProxyMessageRequest struct {

	// Action (SMS or PUSH)
	// Required: true
	Action string `json:"action"`

	// From
	// Required: true
	Address string `json:"address"`

	// Message
	// Required: true
	Body string `json:"body"`

	// Date
	// Required: true
	Date string `json:"date"`

	// Device ID
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this proxy message request
func (m *ProxyMessageRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxyMessageRequest) validateAction(formats strfmt.Registry) error {

	if err := validate.RequiredString("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *ProxyMessageRequest) validateAddress(formats strfmt.Registry) error {

	if err := validate.RequiredString("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *ProxyMessageRequest) validateBody(formats strfmt.Registry) error {

	if err := validate.RequiredString("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *ProxyMessageRequest) validateDate(formats strfmt.Registry) error {

	if err := validate.RequiredString("date", "body", m.Date); err != nil {
		return err
	}

	return nil
}

func (m *ProxyMessageRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this proxy message request based on context it is used
func (m *ProxyMessageRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProxyMessageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProxyMessageRequest) UnmarshalBinary(b []byte) error {
	var res ProxyMessageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
