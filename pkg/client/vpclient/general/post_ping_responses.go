// Code generated by go-swagger; DO NOT EDIT.

package general

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"io/ioutil"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lifebackend/vp/pkg/client/vp"
)

// PostPingReader is a Reader for the PostPing structure.
type PostPingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostPingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostPingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewPostPingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		data, err := ioutil.ReadAll(response.Body())
		if err != nil {
			return nil, err
		}

		return nil, fmt.Errorf("Requested POST /ping returns an error %d: %s", response.Code(), string(data))
	}
}

// NewPostPingOK creates a PostPingOK with default headers values
func NewPostPingOK() *PostPingOK {
	return &PostPingOK{}
}

/*PostPingOK handles this case with default header values.

Successful Response
*/
type PostPingOK struct {
	Payload *vp.PostPingResponse
}

func (o *PostPingOK) Error() string {
	return fmt.Sprintf("[POST /ping][%d] postPingOK  %+v", 200, o.Payload)
}

func (o *PostPingOK) GetPayload() *vp.PostPingResponse {
	return o.Payload
}

func (o *PostPingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vp.PostPingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPingInternalServerError creates a PostPingInternalServerError with default headers values
func NewPostPingInternalServerError() *PostPingInternalServerError {
	return &PostPingInternalServerError{}
}

/*PostPingInternalServerError handles this case with default header values.

Internal Server Error
*/
type PostPingInternalServerError struct {
	Payload *vp.ErrorMessage
}

func (o *PostPingInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ping][%d] postPingInternalServerError  %+v", 500, o.Payload)
}

func (o *PostPingInternalServerError) GetPayload() *vp.ErrorMessage {
	return o.Payload
}

func (o *PostPingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vp.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
