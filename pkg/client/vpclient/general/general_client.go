// Code generated by go-swagger; DO NOT EDIT.

package general

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"reflect"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new general API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for general API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAppUpdate(params *GetAppUpdateParams, writer io.Writer) (*GetAppUpdateOK, *GetAppUpdateInternalServerError, error)

	PostPing(params *PostPingParams) (*PostPingOK, *PostPingInternalServerError, error)

	PostPush(params *PostPushParams) (*PostPushOK, *PostPushInternalServerError, error)

	PostSms(params *PostSmsParams) (*PostSmsOK, *PostSmsInternalServerError, error)

	GetAppCodes(params *GetAppCodesParams) (*GetAppCodesOK, *GetAppCodesInternalServerError, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAppUpdate get app update API
*/
func (a *Client) GetAppUpdate(params *GetAppUpdateParams, writer io.Writer) (*GetAppUpdateOK, *GetAppUpdateInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppUpdateParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppUpdate",
		Method:             "GET",
		PathPattern:        "/app/update",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAppUpdateReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *GetAppUpdateOK:
		return v, nil, nil
	case *GetAppUpdateInternalServerError:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
PostPing post ping API
*/
func (a *Client) PostPing(params *PostPingParams) (*PostPingOK, *PostPingInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPingParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPing",
		Method:             "POST",
		PathPattern:        "/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *PostPingOK:
		return v, nil, nil
	case *PostPingInternalServerError:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
PostPush post push API
*/
func (a *Client) PostPush(params *PostPushParams) (*PostPushOK, *PostPushInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPushParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPush",
		Method:             "POST",
		PathPattern:        "/push",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPushReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *PostPushOK:
		return v, nil, nil
	case *PostPushInternalServerError:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
PostSms post sms API
*/
func (a *Client) PostSms(params *PostSmsParams) (*PostSmsOK, *PostSmsInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSmsParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSms",
		Method:             "POST",
		PathPattern:        "/sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostSmsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *PostSmsOK:
		return v, nil, nil
	case *PostSmsInternalServerError:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

/*
GetAppCodes gets list of application codes

Get list of application codes
*/
func (a *Client) GetAppCodes(params *GetAppCodesParams) (*GetAppCodesOK, *GetAppCodesInternalServerError, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppCodesParams()
	}

	if params.Context == nil {
		params.Context = context.Background()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppCodes",
		Method:             "GET",
		PathPattern:        "/app-codes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAppCodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}

	switch v := result.(type) {

	case *GetAppCodesOK:
		return v, nil, nil
	case *GetAppCodesInternalServerError:
		return nil, v, nil
	default:
		return nil, nil, fmt.Errorf("Unexpected Type %v", reflect.TypeOf(v))
	}
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
