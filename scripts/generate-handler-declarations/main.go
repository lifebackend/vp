package main

import (
	"fmt"
	"html/template"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"strings"
)

func main() {
	serviceName, exists := os.LookupEnv("SERVICE_NAME")
	if !exists {
		log.Fatal("expected ENV variable SERVICE_NAME")
	}

	srcFileWithHandlers := fmt.Sprintf("internal/app/%s/server/restapi/configure_%s.go", serviceName, serviceName)
	dstFile := fmt.Sprintf("internal/app/%s/handlers/service.gen.go", serviceName)

	data, err := ioutil.ReadFile(srcFileWithHandlers)
	if err != nil {
		log.Fatal(err)
	}

	dataStr := string(data)

	var handlersBody string
	{
		// locate handlers
		beginPattern := "/* default handlers declaration"
		endPattern := "default handlers declaration */"

		startPosition := strings.Index(dataStr, beginPattern)
		if startPosition == 0 {
			log.Fatalf("expected pattern '%s' not found", beginPattern)
		}
		startPosition += len(beginPattern) + 1

		endPosition := strings.Index(dataStr, endPattern)
		if endPosition == 0 {
			log.Fatalf("expected pattern '%s' not found", endPattern)
		}
		if endPosition < startPosition {
			log.Fatalf("expected pattern '%s' not found", endPattern)
		}

		handlersBody = dataStr[startPosition:endPosition]
	}

	// locate imports
	var importsBody string
	{
		// locate handlers
		beginPattern := "/* default handlers import"
		endPattern := "default handlers import */"

		startPosition := strings.Index(dataStr, beginPattern)
		if startPosition == 0 {
			log.Fatalf("expected pattern '%s' not found", beginPattern)
		}
		startPosition += len(beginPattern) + 1

		endPosition := strings.Index(dataStr, endPattern)
		if endPosition == 0 {
			log.Fatalf("expected pattern '%s' not found", endPattern)
		}
		if endPosition < startPosition {
			log.Fatalf("expected pattern '%s' not found", endPattern)
		}

		importsBody = dataStr[startPosition:endPosition]
	}

	operationStructureName := fmt.Sprintf(
		"%s%s",
		strings.ToUpper(serviceName[:1]),
		strings.ToLower(serviceName[1:]),
	)

	// create target file
	f, err := os.Create(dstFile)
	if err != nil {
		log.Fatalf("unable to create a file '%s'. Err: %s", dstFile, err)
	}

	defer func() {
		err = f.Close()
		if err != nil {
			log.Fatalf("unable to close the file '%s'. Err: %s", dstFile, err)
		}

		err = exec.Command("goimports", "-w", dstFile).Start()
		if err != nil {
			log.Printf("unable format file '%s'. Err: %s", dstFile, err)
		}
	}()

	// render template and write into the file
	err = packageTemplate.Execute(
		f,
		struct {
			RawImportsBody         template.HTML
			RawHandlersBody        template.HTML
			OperationStructureName string
		}{
			RawImportsBody:         template.HTML(importsBody),  //nolint:gosec
			RawHandlersBody:        template.HTML(handlersBody), //nolint:gosec
			OperationStructureName: operationStructureName,
		},
	)
	if err != nil {
		log.Println(err)
	}
}

var (
	packageTemplate = template.Must(template.New("").Parse(tpl))
	tpl             = `//	Do not edit this file. This file was auto generated
//	All the changes will be overwritten by the "make generate-handler-declarations" command

package handlers

import (
	{{ .RawImportsBody }}
)

func AddDefaultHandlers(api *operations.{{ .OperationStructureName }}API, h *Handlers) {
	{{ .RawHandlersBody }}
}
`
)
